<?php
/**
 * Copyright Total Processing. All rights reserved.
 * See COPYING.txt for license details.
 */
declare(strict_types=1);

namespace TotalProcessing\Opp\Gateway\Response;

use Magento\Checkout\Model\Session as CheckoutSession;
use Magento\Framework\Serialize\Serializer\Json as Serializer;
use Magento\Payment\Gateway\Data\PaymentDataObjectInterface;
use Magento\Payment\Gateway\Helper\ContextHelper;
use Magento\Payment\Gateway\Response\HandlerInterface;
use Magento\Payment\Model\InfoInterface;
use Magento\Sales\Api\Data\OrderPaymentInterface;
use Magento\Sales\Api\Data\OrderPaymentExtensionInterface;
use Magento\Sales\Api\Data\OrderPaymentExtensionInterfaceFactory;
use Magento\Vault\Api\Data\PaymentTokenFactoryInterface;
use Magento\Vault\Api\Data\PaymentTokenInterface;
use Magento\Vault\Model\CustomerTokenManagement;
use Magento\Vault\Model\Ui\VaultConfigProvider;
use TotalProcessing\Opp\Gateway\Helper\SuccessCode;
use TotalProcessing\Opp\Gateway\Request\PaymentDataBuilder;
use TotalProcessing\Opp\Gateway\SubjectReader;
use TotalProcessing\Opp\Model\System\Config\PaymentType;

/**
 * Class PaymentStatusCommonHandler
 * @package TotalProcessing\Opp\Gateway\Response
 */
class PaymentStatusCommonHandler implements HandlerInterface
{
    /**
     * The identifier of the payment request that can be used to reference the payment later.
     * You get this as the field id of a payment's response and then can use it as referencedPaymentId
     * in the backoffice tutorial or as the {id} part of the URL for sending referencing requests.
     */
    const TRANSACTION_ID = 'id';
    /**
     * The payment type of the request.
     */
    const PAYMENT_TYPE = 'paymentType';
    /**
     * The payment brand of the request.
     */
    const PAYMENT_BRAND = 'paymentBrand';
    /**
     * The amount of the request.
     */
    const AMOUNT = 'amount';
    /**
     * The currency of the request.
     */
    const CURRENCY = 'currency';
    /**
     * Unique reference number provided by merchant or generated by the gateway.
     */
    const MERCHANT_TRANSACTION_ID = 'merchantTransactionId';
    /**
     * The result container with code and description.
     */
    const RESULT_NAMESPACE = 'result';
    /**
     * The unique code that indicates the result status of the request.
     */
    const RESULT_CODE = 'code';
    /**
     * A textual description explaining the result.code's meaning.
     */
    const RESULT_DESCRIPTION = 'description';
    /**
     * A name value pair used for sending custom information.
     * NOTE: customParameters that are sent from the client-side (e.g. for COPYandPAY)
     * should be prepended with SHOPPER_*, for example customParameters[SHOPPER_customerId]
     */
    const CUSTOM_PARAMETERS_NAMESPACE = 'customParameters';
    const CUSTOM_PARAMETERS_QUOTE_ID = 'SHOPPER_quote_id';
    /**
     * Returns the score of the executed transaction risk checks.
     * The value is a number from -99999 to +99999. Can be returned both for standalone risk requests
     * and payment requests that include risk checks.
     */
    const RISK_NAMESPACE = 'risk';
    const RISK_SCORE = 'score';
    /**
     * Useful for support purposes.
     */
    const BUILD_NUMBER = 'buildNumber';
    /**
     * The timestamp the response has generated
     */
    const TIMESTAMP = 'timestamp';
    /**
     * An internal unique identifier for the request.
     */
    const NDC = 'ndc';

    /**
     * @var CheckoutSession
     */
    protected $checkoutSession;

    /**
     * @var CustomerTokenManagement
     */
    protected $customerTokenManagement;

    /**
     * @var OrderPaymentExtensionInterfaceFactory
     */
    protected $paymentExtensionFactory;

    /**
     * @var PaymentTokenFactoryInterface
     */
    protected $paymentTokenFactory;

    /**
     * @var Serializer
     */
    protected $serializer;

    /**
     * @var SubjectReader
     */
    protected $subjectReader;

    /**
     * @param CheckoutSession $checkoutSession
     * @param CustomerTokenManagement $customerTokenManagement
     * @param OrderPaymentExtensionInterfaceFactory $paymentExtensionFactory
     * @param PaymentTokenFactoryInterface $paymentTokenFactory
     * @param SubjectReader $subjectReader
     * @param Serializer $serializer
     */
    public function __construct(
        CheckoutSession $checkoutSession,
        CustomerTokenManagement $customerTokenManagement,
        OrderPaymentExtensionInterfaceFactory $paymentExtensionFactory,
        PaymentTokenFactoryInterface $paymentTokenFactory,
        SubjectReader $subjectReader,
        Serializer $serializer
    ) {
        $this->checkoutSession = $checkoutSession;
        $this->customerTokenManagement = $customerTokenManagement;
        $this->paymentExtensionFactory = $paymentExtensionFactory;
        $this->paymentTokenFactory = $paymentTokenFactory;
        $this->serializer = $serializer;
        $this->subjectReader = $subjectReader;
    }

    /**
     * {@inheritdoc}
     */
    public function handle(array $handlingSubject, array $response)
    {
    }
}
